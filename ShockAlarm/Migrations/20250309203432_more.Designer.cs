// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShockAlarm.Database;

#nullable disable

namespace ShockAlarm.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250309203432_more")]
    partial class more
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("ShockAlarm.Alarm.Alarm", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Cron")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("DisableAfterFirstTrigger")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("NextTrigger")
                        .HasColumnType("TEXT");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Alarms");
                });

            modelBuilder.Entity("ShockAlarm.Alarm.AlarmTone", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AlarmTones");
                });

            modelBuilder.Entity("ShockAlarm.Alarm.AlarmToneComponent", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AlarmToneId")
                        .HasColumnType("TEXT");

                    b.Property<int>("ControlType")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Intensity")
                        .HasColumnType("INTEGER");

                    b.Property<double>("TriggerSeconds")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("AlarmToneId");

                    b.ToTable("AlarmToneComponent");
                });

            modelBuilder.Entity("ShockAlarm.Alarm.OpenShockShockerLimits", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<ushort>("duration")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("intensity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("OpenShockShockerLimits");
                });

            modelBuilder.Entity("ShockAlarm.Alarm.OpenShockShockerPermissions", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("shock")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("sound")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("vibrate")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("OpenShockShockerPermissions");
                });

            modelBuilder.Entity("ShockAlarm.Alarm.OpenshockApiToken", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ForOpenShockUser")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Server")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("OpenshockApiTokens");
                });

            modelBuilder.Entity("ShockAlarm.Alarm.Shocker", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AlarmId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ApiTokenId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ControlType")
                        .HasColumnType("INTEGER");

                    b.Property<ushort>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<byte>("Intensity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LimitsId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Paused")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PermissionsId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ShockerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ToneId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ToneName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AlarmId");

                    b.HasIndex("ApiTokenId");

                    b.HasIndex("LimitsId")
                        .IsUnique();

                    b.HasIndex("PermissionsId")
                        .IsUnique();

                    b.HasIndex("ShockerId");

                    b.HasIndex("ToneId");

                    b.ToTable("Shockers");
                });

            modelBuilder.Entity("ShockAlarm.Users.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ShockAlarm.Users.UserSession", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastAccess")
                        .HasColumnType("TEXT");

                    b.Property<string>("Origin")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ValidUnti")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("ShockAlarm.Alarm.Alarm", b =>
                {
                    b.HasOne("ShockAlarm.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShockAlarm.Alarm.AlarmTone", b =>
                {
                    b.HasOne("ShockAlarm.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShockAlarm.Alarm.AlarmToneComponent", b =>
                {
                    b.HasOne("ShockAlarm.Alarm.AlarmTone", null)
                        .WithMany("Components")
                        .HasForeignKey("AlarmToneId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ShockAlarm.Alarm.OpenshockApiToken", b =>
                {
                    b.HasOne("ShockAlarm.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShockAlarm.Alarm.Shocker", b =>
                {
                    b.HasOne("ShockAlarm.Alarm.Alarm", "Alarm")
                        .WithMany("Shockers")
                        .HasForeignKey("AlarmId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ShockAlarm.Alarm.OpenshockApiToken", "ApiToken")
                        .WithMany()
                        .HasForeignKey("ApiTokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShockAlarm.Alarm.OpenShockShockerLimits", "Limits")
                        .WithOne()
                        .HasForeignKey("ShockAlarm.Alarm.Shocker", "LimitsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ShockAlarm.Alarm.OpenShockShockerPermissions", "Permissions")
                        .WithOne()
                        .HasForeignKey("ShockAlarm.Alarm.Shocker", "PermissionsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ShockAlarm.Alarm.AlarmTone", "Tone")
                        .WithMany()
                        .HasForeignKey("ToneId");

                    b.Navigation("Alarm");

                    b.Navigation("ApiToken");

                    b.Navigation("Limits");

                    b.Navigation("Permissions");

                    b.Navigation("Tone");
                });

            modelBuilder.Entity("ShockAlarm.Alarm.Alarm", b =>
                {
                    b.Navigation("Shockers");
                });

            modelBuilder.Entity("ShockAlarm.Alarm.AlarmTone", b =>
                {
                    b.Navigation("Components");
                });
#pragma warning restore 612, 618
        }
    }
}
